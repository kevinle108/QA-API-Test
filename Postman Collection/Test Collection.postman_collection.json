{
	"info": {
		"_postman_id": "7b6afd1a-ae11-4832-b7f6-ec78a3f2efef",
		"name": "Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14464357"
	},
	"item": [
		{
			"name": "jsonplaceholder - GET all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "jsonplaceholder - Create a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 1, \r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "jsonplaceholder - Update a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"userId\": 1, \r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "jsonplaceholder - Patch a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "jsonplaceholder - Delete a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "jsonplaceholder - Negative Test - Invalid DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "jsonplaceholder - GET specific comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/comments?postId=1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "pokeapi - GET by pokemon name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql('lugia');\r",
							"});\r",
							"\r",
							"pm.test(\"Correct base_experience\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.base_experience).to.eql(340);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct weight\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.weight).to.eql(2160);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://pokeapi.co/api/v2/pokemon/lugia",
					"protocol": "https",
					"host": [
						"pokeapi",
						"co"
					],
					"path": [
						"api",
						"v2",
						"pokemon",
						"lugia"
					]
				}
			},
			"response": []
		},
		{
			"name": "pokeapi - GET generation info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Region name is Kanto\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.main_region.name).to.eql('kanto');\r",
							"});\r",
							"\r",
							"pm.test(\"Contains 151 species\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.pokemon_species.length).to.eql(151);\r",
							"});\r",
							"\r",
							"pm.test(\"Contains 15 types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.types.length).to.eql(15);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://pokeapi.co/api/v2/generation/1",
					"protocol": "https",
					"host": [
						"pokeapi",
						"co"
					],
					"path": [
						"api",
						"v2",
						"generation",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "randomuser - GET random user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Single result\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results.length).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "randomuser - GET  10 users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"10 results\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results.length).to.eql(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/?results=10",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "results",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "randomuser - GET  10 female users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"10 results\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results.length).to.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"Each user is female\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var users = jsonData.results;\r",
							"    let femaleCount = 0;\r",
							"    users.forEach(user => {\r",
							"        if (user.gender == 'female') {\r",
							"            femaleCount++;\r",
							"        }\r",
							"    });\r",
							"    pm.expect(femaleCount).to.eql(10);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/?gender=female&results=10",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "gender",
							"value": "female"
						},
						{
							"key": "results",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "randomuser - GET  user certain length pw",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"1 result\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Password is 8-16 char long\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var pw = jsonData.results[0].login.password;\r",
							"    pm.expect(pw.length).to.greaterThan(7);\r",
							"    pm.expect(pw.length).to.lessThan(17);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/?password=upper,lower,8-16",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "password",
							"value": "upper,lower,8-16"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "randomuser - GET  user w/ US nationality",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"1 result\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"US Nationality\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var country = jsonData.results[0].location.country;\r",
							"    pm.expect(country).to.eql('United States');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/?nat=us",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "nat",
							"value": "us"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "randomuser - GET  US male w/ certain length pw",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"1 result\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.results.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"User is male\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var user = jsonData.results[0];\r",
							"    pm.expect(user.gender).to.eql('male');\r",
							"});\r",
							"\r",
							"pm.test(\"US Nationality\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var country = jsonData.results[0].location.country;\r",
							"    pm.expect(country).to.eql('United States');\r",
							"});\r",
							"\r",
							"pm.test(\"Password is 8-16 char long\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var pw = jsonData.results[0].login.password;\r",
							"    pm.expect(pw.length).to.greaterThan(7);\r",
							"    pm.expect(pw.length).to.lessThan(17);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/?gender=male&nat=us&password=upper,lower,8-16",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					],
					"query": [
						{
							"key": "gender",
							"value": "male"
						},
						{
							"key": "nat",
							"value": "us"
						},
						{
							"key": "password",
							"value": "upper,lower,8-16"
						}
					]
				}
			},
			"response": []
		}
	]
}